// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    static boolean color;
    static int screen;
    static int numWords;

    // 256 pixels x 512 pixels
    

    /** Initializes the Screen. */
    function void init() 
    {
        var int index;

        let color = true;
        let screen = 16384;
        let numWords = 8192;

        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let index = 2;
        while (index < 16)
        {
            let powersOfTwo[index] = powersOfTwo[index - 1] + powersOfTwo[index - 1];
            let index = index + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() 
    {
        var int i;
        let i = 0;
        while (i < 8192)
        {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) 
    {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) 
    {
        var int address, value, q, modulo, mask;

        let address = screen + (32 * y) + (x / 16);
        let value = Memory.peek(address);

        let q = x / 16;
        let modulo = x - (q * 16);

        let mask = powersOfTwo[modulo];
        if (color)
        {
            let value = value | mask;
        }
        else
        {
            let value = value & (~mask);
        }
        
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) 
    {
        // Vertical line
        if (x1 = x2)
        {
            do Screen.drawVerticalLine(x1, y1, y2);
        }

        // Horizontal line
        if (y1 = y2)
        {
            do Screen.drawHorizontalLine(x1, x2, y1);
        }


        // NE lines
        if ( (x1 < x2) & (y1 > y2))
        {
            do Screen.drawNELine(x1, y1, x2, y2);
        }

        // SW lines, just reverse coordinates and call function to draw NE
        if ( (x1 > x2) & (y1 < y2) )
        {
            do Screen.drawNELine(x2, y2, x1, y1);
        }


        // SE lines
        if ( (x1 < x2) & (y1 < y2))
        {
            do Screen.drawSELine(x1, y1, x2, y2);
        }

        // NW lines, just reverse coordinates and call function to draw SE
        if ( (x1 > x2) & (y1 > y2))
        {
            do Screen.drawSELine(x2, y2, x1, y1);
        }
        
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {
        while (~(y1 > y2))
        {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) 
    {
        var int dy;
        var int rSquared;
        var int xOffset;

        let dy = -r;
        let rSquared = r * r;

        while (~(dy > r))
        {
            let xOffset = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawLine(x - xOffset, y + dy, x + xOffset, y + dy);
            let dy = dy + 1;
        }
        return;
    }


    // Did not optimize this code. 
    // Seems like we could make words of 0s/1s to draw bytes at a time
    function void drawHorizontalLine(int x1, int x2, int y)
    {
        var int xMin, xMax;

        let xMin = Math.min(x1, x2);
        let xMax = Math.max(x1, x2);

        while (~(xMin > xMax))
        {
            do Screen.drawPixel(xMin, y);
            let xMin = xMin + 1;
        }
        return;
    }


    // Did not optimize this code. 
    // Seems like we could make words of 0s/1s to draw bytes at a time
    function void drawVerticalLine(int x, int y1, int y2)
    {
        var int yMin, yMax;

        let yMin = Math.min(y1, y2);
        let yMax = Math.max(y1, y2);

        while (~(yMin > yMax))
        {
            do Screen.drawPixel(x, yMin);
            let yMin = yMin + 1;
        }
        return;
    }

    // Draw lines that go "NorthEast"
    // Same as draw southwest in reverse
    function void drawNELine(int x1, int y1, int x2, int y2)
    {
        var int a, b;
        var int dx, dy;
        var int diff;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y1 - y2;

        while ( (~(a > dx)) & (~(b > dy)))
        {
            do Screen.drawPixel(x1 + a, y1 - b);

            if (diff < 0)
            {
                let a = a + 1;
                let diff = diff + dy;
            }
            else
            {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    // Draw lines that go "NorthEast"
    // Same as draw southwest in reverse
    function void drawSELine(int x1, int y1, int x2, int y2)
    {
        var int a, b;
        var int dx, dy;
        var int diff;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;

        while ( (~(a > dx)) & (~(b > dy)))
        {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (diff < 0)
            {
                let a = a + 1;
                let diff = diff + dy;
            }
            else
            {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }
}
